#!/opt/local/bin/python

import sys, os
import pycurl
import StringIO
import json

class Monitor(object):
    endpoint = ''
    index = ''
    elements = {'docs':['Docs',['count','deleted']],
                'search':['Search',['query_total']],
                'query_cache':['Query cache',['miss_count','hit_count']]
                }

    def __init__(self):
        host = os.environ.get('host')
        self.index = os.environ.get('index')
        if not host:
            host = 'localhost'
        if not self.index:
            self.index = 'someindex'
        self.endpoint = 'https://'+host+'/'+self.index+'/_stats'

    def _getresults(self):
        output = StringIO.StringIO()
        conn = pycurl.Curl()
        conn.setopt(pycurl.URL, self.endpoint)
        conn.setopt(pycurl.HTTPHEADER,['Content-Type: application/json'])
        conn.setopt(pycurl.WRITEFUNCTION, output.write)
        conn.perform()
        result = output.getvalue()
        output.close()
        conn.close()
        return result

    def _getvalues(self,element):
        index =  self.index
        result = json.loads(self._getresults())
        value = result['indices'][index]['total'][element]
        return value

    def printValues(self,element):
        result = self._getvalues(element)
        for key, value in result.iteritems():
            if key in self.elements[element][1]:
                print("%s.value %d" % (key,value))

    def printConfs(self,element):
        result = self._getvalues(element)
        typeod = 'AREA'
        print("graph_title elasticsearch %s" % self.elements[element][0])
        print("graph_category elasticsearch")
        print("graph_args --base 1000 -l 0")
        print("graph_period minute")
        print("graph_vlabel request per minute")
        for key, value in result.iteritems():
            if str(key) != self.elements[element][1][0]:
                typeod = 'STACK'
            if key in self.elements[element][1]:
                Ckey = key.capitalize()
                print("%s.label %s" % (key,Ckey))
                print("%s.type DERIVE" % key)
                print("%s.draw %s" % (key,typeod))
                print("%s.min 0" % key)

    def printElements(self):
        for key in self.elements.keys():
            print("%s" % key)

if __name__ == '__main__':
    monitor = Monitor()
    if sys.argv[1] == "suggest":
        monitor.printElements()
        sys.exit()
    element = sys.argv[0].split("-")
    if len(sys.argv) < 2:
        monitor.printValues(element[1])
    elif sys.argv[1] == "config":
        monitor.printConfs(element[1])
    else:
        print("Something Wrong")
